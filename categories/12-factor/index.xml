<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>12 Factor on {{Ramesh  Ponnada}}</title>
    <link>http://rameshponnada.in/categories/12-factor/</link>
    <description>Recent content in 12 Factor on {{Ramesh  Ponnada}}</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Jun 2018 08:46:57 +0530</lastBuildDate>
    
	<atom:link href="http://rameshponnada.in/categories/12-factor/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>12 Factor Applications for Cloud Native</title>
      <link>http://rameshponnada.in/2018/06/24/12-factor-applications-for-cloud-native/</link>
      <pubDate>Sun, 24 Jun 2018 08:46:57 +0530</pubDate>
      
      <guid>http://rameshponnada.in/2018/06/24/12-factor-applications-for-cloud-native/</guid>
      <description>&lt;p&gt;1) Codebase – use version control, one codebase tracked in revision control for many deployments.&lt;/p&gt;

&lt;p&gt;2) Dependencies – use a package manager and don’t commit dependencies in the codebase repository.&lt;/p&gt;

&lt;p&gt;3) Config – store the config in Environment Variable, if you have to repackage your application, you’re doing it wrong.&lt;/p&gt;

&lt;p&gt;4) Backing Services – a deploy of the twelve-factor app should be able to swap out a local MySQL database with one managed by a third party (such as Amazon RDS) without any changes to the app’s code.&lt;/p&gt;

&lt;p&gt;5) Build, Release, Run – the twelve-factor app uses strict separation between the build, release, and run stages. Every release should always have a unique release ID and releases should allow rollback.&lt;/p&gt;

&lt;p&gt;6) Processes – execute the app as one or more stateless processes, the Twelve-factor processes are stateless and share-nothing.&lt;/p&gt;

&lt;p&gt;7) Port Binding – export services via port binding, The twelve-factor app is completely self-contained.&lt;/p&gt;

&lt;p&gt;8) Concurrency – scale out via the process model. Each process should be individually scaled, with Factor 6 (Stateless), it is easy to scale the services.&lt;/p&gt;

&lt;p&gt;9) Disposability – maximize robustness with fast startup and graceful shutdown, we can achieve this with containers.&lt;/p&gt;

&lt;p&gt;10) Dev/Prod Parity – Keep development, staging, and production as similar as possible, the twelve-factor app is designed for continuous deployment by keeping the gap between development and production small.&lt;/p&gt;

&lt;p&gt;11) Logs – treat logs as event streams, a twelve-factor app never concerns itself with routing or storage of its output stream.&lt;/p&gt;

&lt;p&gt;12) Admin Processes – run admin/management tasks as one-off processes.&lt;/p&gt;

&lt;p&gt;The 12-factor App methodology is technology and language agnostic but satisfied by Containers, Microservices, and CI/CD Pipelines with a focus on DevOps. You can access more information on The 12-factor App at &lt;a href=&#34;https://12factor.net/&#34;&gt;https://12factor.net/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>